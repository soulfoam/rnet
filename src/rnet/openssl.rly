#if RNET_OPENSSL
export_library
{
    SHA_DIGEST_LENGTH :: define u8 = 20;
    SHA1 :: fn (d: u8&, size: usize, md: u8&) -> u8& = extern "SHA1";

    SSL        :: type_opaque;
    SSL_METHOD :: type_opaque;
    SSL_CTX    :: type_opaque;

    SSL_new    :: fn (ctx: SSL_CTX&) -> SSL&       = extern "SSL_new";
    SSL_free   :: fn (s: SSL&)                     = extern "SSL_free";
    SSL_set_fd :: fn (s: SSL&, fd: c_int) -> c_int = extern "SSL_set_fd";
    SSL_get_fd :: fn (s: SSL&) -> c_int            = extern "SSL_get_fd";

    SSL_shutdown                 :: fn (s: SSL&) -> c_int                                                    = extern "SSL_shutdown";

    SSL_accept                   :: fn (s: SSL&) -> c_int                                                    = extern "SSL_accept";
    SSL_stateless                :: fn (s: SSL&) -> c_int                                                    = extern "SSL_stateless";
    SSL_connect                  :: fn (s: SSL&) -> c_int                                                    = extern "SSL_connect";

    SSL_read                     :: fn (s: SSL&, buffer: void&, size: c_int) -> c_int                        = extern "SSL_read";
    SSL_read_ex                  :: fn (s: SSL&, buffer: void&, size: usize, bytes_read: usize&) -> c_int    = extern "SSL_read_ex";

    SSL_peek                     :: fn (s: SSL&, buffer: void&, size: c_int) -> c_int                        = extern "SSL_peek";
    SSL_peek_ex                  :: fn (s: SSL&, buffer: void&, size: usize, bytes_read: usize&) -> c_int    = extern "SSL_peek_ex";
    SSL_write                    :: fn (s: SSL&, buffer: void&, size: c_int) -> c_int                        = extern "SSL_write";
    SSL_write_ex                 :: fn (s: SSL&, buffer: void&, size: usize, bytes_written: usize&) -> c_int = extern "SSL_write_ex";

    SSL_CTX_new                  :: fn (method: SSL_METHOD&) -> SSL_CTX&                                     = extern "SSL_CTX_new";
    SSL_CTX_free                 :: fn (ctx: SSL_CTX&)                                                       = extern "SSL_CTX_free";
    SSL_CTX_use_PrivateKey_file  :: fn (ctx: SSL_CTX&, file: c_char&, type: c_int) -> c_int                  = extern "SSL_CTX_use_PrivateKey_file";
    SSL_CTX_use_certificate_file :: fn (ctx: SSL_CTX&, file: c_char&, type: c_int) -> c_int                  = extern "SSL_CTX_use_certificate_file";

    TLS_client_method :: fn () -> SSL_METHOD& = extern "TLS_client_method";
    TLS_server_method :: fn () -> SSL_METHOD& = extern "TLS_server_method";

    SSL_get_version   :: fn (ssl: SSL&) -> c_char& = extern "SSL_get_version";

    // err
    SSL_ERROR_NONE                 :: define c_int = 0;
    SSL_ERROR_SSL                  :: define c_int = 1;
    SSL_ERROR_WANT_READ            :: define c_int = 2;
    SSL_ERROR_WANT_WRITE           :: define c_int = 3;
    SSL_ERROR_WANT_X509_LOOKUP     :: define c_int = 4;
    SSL_ERROR_SYSCALL              :: define c_int = 5; // look at error stack/return value/errno 
    SSL_ERROR_ZERO_RETURN          :: define c_int = 6;
    SSL_ERROR_WANT_CONNECT         :: define c_int = 7;
    SSL_ERROR_WANT_ACCEPT          :: define c_int = 8;
    SSL_ERROR_WANT_ASYNC           :: define c_int = 9;
    SSL_ERROR_WANT_ASYNC_JOB       :: define c_int = 10;
    SSL_ERROR_WANT_CLIENT_HELLO_CB :: define c_int = 11;
    SSL_ERROR_WANT_RETRY_VERIFY    :: define c_int = 12;

    SSL_get_error          :: fn (ssl: SSL&, ret_code: c_int) -> c_int  = extern "SSL_get_error";

    ERR_clear_error        :: fn ()                                      = extern "ERR_clear_error";
    ERR_print_errors_cb    :: fn (cb: ERR_print_errors_cb_fn&, u: void&) = extern "ERR_print_errors_cb";
    ERR_print_errors_cb_fn :: type_alias                                 = fn (str: c_char&, len: usize, u: void&) -> c_int;

    ERR_print_errors_fp :: fn (fp: void&) = extern "ERR_print_errors_fp";

    // X509
    X509_FILETYPE_PEM      :: define u8 = 1;
    X509_FILETYPE_ASN1     :: define u8 = 2;
    X509_FILETYPE_DEFAULT  :: define u8 = 3;
    SSL_FILETYPE_ASN1      :: define u8 = X509_FILETYPE_ASN1;
    SSL_FILETYPE_PEM       :: define u8 = X509_FILETYPE_PEM;

    PKCS5_PBKDF2_HMAC_SHA1 :: fn (pass: c_char&, pass_size: c_int, salt: c_uchar&, salt_size: c_int, iter: c_int, key_size: c_int, out: c_uchar&) -> c_int = extern "PKCS5_PBKDF2_HMAC_SHA1";
    RAND_bytes             :: fn (buf: c_uchar&, num: c_int) -> c_int = extern "RAND_bytes";
}

#end
