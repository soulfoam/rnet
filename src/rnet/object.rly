export
{
    rnet_object_type :: enum u8
    {
        RNET_OBJECT_TCP;
        RNET_OBJECT_UDP;
    }

    rnet_object :: struct
    {
        type : rnet_object_type;
        union
        {
            tcp : rnet_tcp;
            udp : rnet_udp;
        }

        socket  : rnet_socket;
        version : u64;
    }
    
    rnet_object_id :: type_alias = u64;

    rnet_object_write :: struct
    {
        buffer        : void&;
        buffer_size   : usize;
        bytes_written : usize;
        address       : rnet_address;
        udp_sent_fn   : rnet_udp_sent_fn&;
        tcp_write_fn  : rnet_tcp_write_fn&;

        next          : rnet_object_write&;
    }

    // Called by the child, so it doesn't cleanup the tcp/udp
    rnet_object_destroy :: fn (obj: rnet_object&);

    rnet_object_get_index :: fn (obj: rnet_object&) -> u32;

    rnet_object_get_id         :: fn (obj: rnet_object&) -> rnet_object_id;
    rnet_object_id_get_index   :: fn (id: rnet_object_id) -> u32;
    rnet_object_id_get_version :: fn (id: rnet_object_id) -> u32;
}

import
{
    "rnet";
}

rnet_object_destroy :: fn (obj: rnet_object&)
{
    if (obj.socket != RNET_INVALID_SOCKET)
    {
        rnet_native_close_socket(obj.socket) as void;
        obj.socket = RNET_INVALID_SOCKET;
    }

    obj.version += 1;
}

rnet_object_get_index :: fn (obj: rnet_object&) -> u32
{
    return (obj - g_rnet.objects) as u32;
}

rnet_object_get_id :: fn (obj: rnet_object&) -> rnet_object_id
{
    return obj.version as u64 << 32 | rnet_object_get_index(obj) as u64;
}

rnet_object_id_get_index :: fn (id: rnet_object_id) -> u32
{
    return id as u32;
}

rnet_object_id_get_version :: fn (id: rnet_object_id) -> u32
{ 
    return (id >> 32) as u32;
}

