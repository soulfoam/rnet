#if RNET_OPENSSL
export_library
{
    rnet_ssl_context_create_client    :: fn (ctx: rnet_ssl_context&&) -> rnet_error;
    rnet_ssl_context_create_server    :: fn (ctx: rnet_ssl_context&&, certificate_path: string, private_key_path: string) -> rnet_error;
    rnet_ssl_context_destroy          :: fn (ctx: rnet_ssl_context&);
    rnet_ssl_print_errors_into_stderr :: fn ();

    rnet_ssl_context                  :: type_alias = SSL_CTX;
}

import
{
    "rnet/error";
    "rnet/openssl";
    "std";
}

rnet_ssl_context_create_client :: fn (ctx: rnet_ssl_context&&) -> rnet_error
{
    method: SSL_METHOD& = TLS_client_method();
    ctx@ = SSL_CTX_new(method);
    if (ctx@ == NULL) return RNET_ERROR_SSL_NEW_CONTEXT;

    return RNET_OK;
}

rnet_ssl_context_create_server :: fn (dst_ctx: rnet_ssl_context&&, certificate_path: string, private_key_path: string) -> rnet_error
{
    method: SSL_METHOD& = TLS_server_method();
    ctx: rnet_ssl_context& = SSL_CTX_new(method);
    if (ctx == NULL) return RNET_ERROR_SSL_NEW_CONTEXT;

    cert_file     : c_char[STD_IO_PATH_MAX];
    priv_key_file : c_char[STD_IO_PATH_MAX];
    std_mem_print(cert_file, STD_IO_PATH_MAX, "{}\0", certificate_path) as void;
    std_mem_print(priv_key_file, STD_IO_PATH_MAX, "{}\0", private_key_path) as void;

    if (SSL_CTX_use_certificate_file(ctx, cert_file, SSL_FILETYPE_PEM) <= 0)
    {
        SSL_CTX_free(ctx);
        return RNET_ERROR_SSL_CERTIFICATE;
    }

    if (SSL_CTX_use_PrivateKey_file(ctx, priv_key_file, SSL_FILETYPE_PEM) <= 0)
    {
        SSL_CTX_free(ctx);
        return RNET_ERROR_SSL_PRIVATE_KEY;
    }
    
    dst_ctx@ = ctx;

    return RNET_OK;
}

rnet_ssl_context_destroy :: fn (ctx: rnet_ssl_context&)
{
    SSL_CTX_free(ctx);
}

stderr :: fn () -> void& = extern "__RLY_stderr";

rnet_ssl_print_errors_into_stderr :: fn ()
{
    ERR_print_errors_fp(stderr());
}


#end

